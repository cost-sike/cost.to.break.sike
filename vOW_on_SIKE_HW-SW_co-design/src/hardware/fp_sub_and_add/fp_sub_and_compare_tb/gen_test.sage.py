
# This file was *autogenerated* from the file gen_test.sage
from sage.all_cmdline import *   # import sage library

_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_216 = Integer(216); _sage_const_4 = Integer(4); _sage_const_448 = Integer(448); _sage_const_128 = Integer(128); _sage_const_250 = Integer(250); _sage_const_137 = Integer(137); _sage_const_503 = Integer(503); _sage_const_239 = Integer(239); _sage_const_751 = Integer(751); _sage_const_372 = Integer(372); _sage_const_23 = Integer(23); _sage_const_20 = Integer(20); _sage_const_32 = Integer(32); _sage_const_434 = Integer(434); _sage_const_159 = Integer(159)# converted from Magma script

import sys
import argparse
import random 

parser = argparse.ArgumentParser(description='generate test inputs for subtraction unit/comparator.',
                formatter_class=argparse.ArgumentDefaultsHelpFormatter)

parser.add_argument('-w', '--w', dest='w', type=int, default=_sage_const_32 ,
          help='radix w')
parser.add_argument('-s', '--seed', dest='seed', type=int, required=False, default=None,
          help='seed')
parser.add_argument('-prime', '--prime', dest='prime', type=int, default=_sage_const_434 ,
          help='prime width')
parser.add_argument('-R', '--R', dest='R', type=int, default=_sage_const_448 ,
          help='rounded prime width')
args = parser.parse_args()

if args.seed:
  set_random_seed(args.seed)
  random.seed(args.seed)

# radix, can be 8, 16, 32, 64, etc, need to be careful about overflow 
w=args.w 
prime=args.prime
R=_sage_const_2 **(args.R)

hex_format_element = "{0:0" + str(w/_sage_const_4 ) +"x}"
format_element = "{0:0" + str(w) +"b}"

# pick a prime:
# testing purpose
if (prime == _sage_const_128 ): 
    p = _sage_const_2 **_sage_const_32 *_sage_const_3 **_sage_const_20 *_sage_const_23 -_sage_const_1 
elif (prime == _sage_const_434 ): 
    p = _sage_const_2 **_sage_const_216 *_sage_const_3 **_sage_const_137 -_sage_const_1   
elif (prime == _sage_const_503 ):
    p = _sage_const_2 **_sage_const_250 *_sage_const_3 **_sage_const_159 -_sage_const_1  
elif (prime == _sage_const_751 ):
    p = _sage_const_2 **_sage_const_372 *_sage_const_3 **_sage_const_239 -_sage_const_1  

# Finite field
Fp = GF(p)
  
# number of digits in operands a and b
n = int(log(R,_sage_const_2 )/w)

# force unsigned arithmetic
Z = IntegerRing()
Fr = IntegerModRing(R)
pp = Fr(-p**-_sage_const_1 )
assert((pp % _sage_const_2 **w) == _sage_const_1 )

# generate random inputs in range [0, p]
#a = Fp.random_element()  
#b = Fp.random_element()  
a = Z(random.randint(_sage_const_0 , p))
b = Z(random.randint(_sage_const_0 , p))
#a = Z(random.randint(-p, 0))
#b = Z(p)

# move a, b to range [0, 2*p]
if (random.randint(_sage_const_0 , _sage_const_1 ) == _sage_const_0 ):
  print "a is bigger than p"
  a += p
else:
  print "a is NOT bigger than p"

if (random.randint(_sage_const_0 , _sage_const_1 ) == _sage_const_1 ):
  print "b is bigger than p"
  b += p
else:
  print "b is NOT bigger than p"

#print "p = ", p
#print "a = ", a
#print "b = ", b

# write digits in a and b into files
oa = [Z(_sage_const_0 )]*n
ob = [Z(_sage_const_0 )]*n

f_a = open("Sage_mem_a.txt", "w");
f_b = open("Sage_mem_b.txt", "w");

for i in range(n):  
    oa[i] = Z((Z(a) >> (w*i)) % _sage_const_2 **w)
    ob[i] = Z((Z(b) >> (w*i)) % _sage_const_2 **w)
    f_a.write(hex_format_element.format(oa[i]))
    f_a.write("\n")
    f_b.write(hex_format_element.format(ob[i]))
    f_b.write("\n")

f_a.close()
f_b.close()

# subtraction result of c
c = Z(a - b)

#print "c = ", c

# write digits in c into files
oc = [Z(_sage_const_0 )]*n 

f_c = open("Sage_sub_res.txt", "w"); 

for i in range(n):  
    oc[i] = Z((Z(c) >> (w*i)) % _sage_const_2 **w) 
    f_c.write(hex_format_element.format(oc[i]))
    f_c.write("\n") 

f_c.close()  

# write value 0 to a file
t = Z(_sage_const_0 )

ot = [Z(_sage_const_0 )]*n 

f_t = open("zero.mem", "w"); 

for i in range(n):  
    ot[i] = Z((Z(t) >> (w*i)) % _sage_const_2 **w) 
    f_t.write(format_element.format(ot[i]))
    f_t.write("\n") 

f_t.close()  

# print comparison result
f_d = open("Sage_comp_res.txt", "w"); 

if (c > _sage_const_0 ):
  print "\nSage comparison result: (a-b) is bigger than 0."
  f_d.write("(a-b) is bigger than 0.")
  f_d.write("\n")
else:
  print "\nSage comparison result: (a-b) is NOT bigger than 0."
  f_d.write("(a-b) is NOT bigger than 0.")
  f_d.write("\n")

f_d.close()  

